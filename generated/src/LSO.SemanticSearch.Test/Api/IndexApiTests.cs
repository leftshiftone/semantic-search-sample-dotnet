/*
 * Semantic Search - Indexer HTTP API
 *
 * The indexer component HTTP API of the semantic search service.  The service depends on a database backend. If a mere vector store (e.g. [Qdrant](https://qdrant.tech/)), instead of a full fledged search engine (e.g. [Elasticsearch](https://www.elastic.co/)), is configured, some advanced functionalities of the API have no effect. This is noted where appropriate, referring to the former as _simple database_ and the latter as _full database_. 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: contact@leftshift.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using LSO.SemanticSearch.Client;
using LSO.SemanticSearch.Api;
// uncomment below to import models
//using LSO.SemanticSearch.Model;

namespace LSO.SemanticSearch.Test.Api
{
    /// <summary>
    ///  Class for testing IndexApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IndexApiTests : IDisposable
    {
        private IndexApi instance;

        public IndexApiTests()
        {
            instance = new IndexApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IndexApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' IndexApi
            //Assert.IsType<IndexApi>(instance);
        }

        /// <summary>
        /// Test IndexGet
        /// </summary>
        [Fact]
        public void IndexGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IndexGet();
            //Assert.IsType<ListAllIndicesResponse>(response);
        }

        /// <summary>
        /// Test IndexIndexNameDelete
        /// </summary>
        [Fact]
        public void IndexIndexNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string indexName = null;
            //string? force = null;
            //instance.IndexIndexNameDelete(indexName, force);
        }

        /// <summary>
        /// Test IndexIndexNameDocumentsDocIdDelete
        /// </summary>
        [Fact]
        public void IndexIndexNameDocumentsDocIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string indexName = null;
            //string docId = null;
            //instance.IndexIndexNameDocumentsDocIdDelete(indexName, docId);
        }

        /// <summary>
        /// Test IndexIndexNameDocumentsPost
        /// </summary>
        [Fact]
        public void IndexIndexNameDocumentsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string indexName = null;
            //string docId = null;
            //CreateDocumentRequest? createDocumentRequest = null;
            //instance.IndexIndexNameDocumentsPost(indexName, docId, createDocumentRequest);
        }

        /// <summary>
        /// Test IndexPost
        /// </summary>
        [Fact]
        public void IndexPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateIndexRequest? createIndexRequest = null;
            //var response = instance.IndexPost(createIndexRequest);
            //Assert.IsType<IndexResponse>(response);
        }
    }
}
