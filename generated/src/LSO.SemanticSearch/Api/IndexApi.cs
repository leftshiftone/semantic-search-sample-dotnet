/*
 * Semantic Search - Indexer HTTP API
 *
 * The indexer component HTTP API of the semantic search service.  The service depends on a database backend. If a mere vector store (e.g. [Qdrant](https://qdrant.tech/)), instead of a full fledged search engine (e.g. [Elasticsearch](https://www.elastic.co/)), is configured, some advanced functionalities of the API have no effect. This is noted where appropriate, referring to the former as _simple database_ and the latter as _full database_. 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: contact@leftshift.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using LSO.SemanticSearch.Client;
using LSO.SemanticSearch.Model;

namespace LSO.SemanticSearch.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIndexApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all indices
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAllIndicesResponse</returns>
        ListAllIndicesResponse IndexGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all indices
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAllIndicesResponse</returns>
        ApiResponse<ListAllIndicesResponse> IndexGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an entire index
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="force">If set to \&quot;true\&quot;, delete index even if it is not empty. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void IndexIndexNameDelete(string indexName, string? force = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an entire index
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="force">If set to \&quot;true\&quot;, delete index even if it is not empty. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IndexIndexNameDeleteWithHttpInfo(string indexName, string? force = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an indexed documents.
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void IndexIndexNameDocumentsDocIdDelete(string indexName, string docId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an indexed documents.
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IndexIndexNameDocumentsDocIdDeleteWithHttpInfo(string indexName, string docId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger indexing of document information.
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="createDocumentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void IndexIndexNameDocumentsPost(string indexName, string docId, CreateDocumentRequest? createDocumentRequest = default(CreateDocumentRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger indexing of document information.
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="createDocumentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IndexIndexNameDocumentsPostWithHttpInfo(string indexName, string docId, CreateDocumentRequest? createDocumentRequest = default(CreateDocumentRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an index
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndexRequest">The index definition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IndexResponse</returns>
        IndexResponse IndexPost(CreateIndexRequest? createIndexRequest = default(CreateIndexRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an index
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndexRequest">The index definition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IndexResponse</returns>
        ApiResponse<IndexResponse> IndexPostWithHttpInfo(CreateIndexRequest? createIndexRequest = default(CreateIndexRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIndexApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all indices
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAllIndicesResponse</returns>
        System.Threading.Tasks.Task<ListAllIndicesResponse> IndexGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all indices
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAllIndicesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAllIndicesResponse>> IndexGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an entire index
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="force">If set to \&quot;true\&quot;, delete index even if it is not empty. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IndexIndexNameDeleteAsync(string indexName, string? force = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an entire index
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="force">If set to \&quot;true\&quot;, delete index even if it is not empty. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IndexIndexNameDeleteWithHttpInfoAsync(string indexName, string? force = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an indexed documents.
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IndexIndexNameDocumentsDocIdDeleteAsync(string indexName, string docId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an indexed documents.
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IndexIndexNameDocumentsDocIdDeleteWithHttpInfoAsync(string indexName, string docId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger indexing of document information.
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="createDocumentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IndexIndexNameDocumentsPostAsync(string indexName, string docId, CreateDocumentRequest? createDocumentRequest = default(CreateDocumentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger indexing of document information.
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="createDocumentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IndexIndexNameDocumentsPostWithHttpInfoAsync(string indexName, string docId, CreateDocumentRequest? createDocumentRequest = default(CreateDocumentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an index
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndexRequest">The index definition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndexResponse</returns>
        System.Threading.Tasks.Task<IndexResponse> IndexPostAsync(CreateIndexRequest? createIndexRequest = default(CreateIndexRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an index
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndexRequest">The index definition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndexResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IndexResponse>> IndexPostWithHttpInfoAsync(CreateIndexRequest? createIndexRequest = default(CreateIndexRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIndexApi : IIndexApiSync, IIndexApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IndexApi : IIndexApi
    {
        private LSO.SemanticSearch.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IndexApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IndexApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndexApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IndexApi(string basePath)
        {
            this.Configuration = LSO.SemanticSearch.Client.Configuration.MergeConfigurations(
                LSO.SemanticSearch.Client.GlobalConfiguration.Instance,
                new LSO.SemanticSearch.Client.Configuration { BasePath = basePath }
            );
            this.Client = new LSO.SemanticSearch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new LSO.SemanticSearch.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = LSO.SemanticSearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndexApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IndexApi(LSO.SemanticSearch.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = LSO.SemanticSearch.Client.Configuration.MergeConfigurations(
                LSO.SemanticSearch.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new LSO.SemanticSearch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new LSO.SemanticSearch.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = LSO.SemanticSearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndexApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IndexApi(LSO.SemanticSearch.Client.ISynchronousClient client, LSO.SemanticSearch.Client.IAsynchronousClient asyncClient, LSO.SemanticSearch.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = LSO.SemanticSearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public LSO.SemanticSearch.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public LSO.SemanticSearch.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LSO.SemanticSearch.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LSO.SemanticSearch.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  List all indices
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAllIndicesResponse</returns>
        public ListAllIndicesResponse IndexGet(int operationIndex = 0)
        {
            LSO.SemanticSearch.Client.ApiResponse<ListAllIndicesResponse> localVarResponse = IndexGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List all indices
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAllIndicesResponse</returns>
        public LSO.SemanticSearch.Client.ApiResponse<ListAllIndicesResponse> IndexGetWithHttpInfo(int operationIndex = 0)
        {
            LSO.SemanticSearch.Client.RequestOptions localVarRequestOptions = new LSO.SemanticSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "IndexApi.IndexGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAllIndicesResponse>("/index", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List all indices
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAllIndicesResponse</returns>
        public async System.Threading.Tasks.Task<ListAllIndicesResponse> IndexGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LSO.SemanticSearch.Client.ApiResponse<ListAllIndicesResponse> localVarResponse = await IndexGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List all indices
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAllIndicesResponse)</returns>
        public async System.Threading.Tasks.Task<LSO.SemanticSearch.Client.ApiResponse<ListAllIndicesResponse>> IndexGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LSO.SemanticSearch.Client.RequestOptions localVarRequestOptions = new LSO.SemanticSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "IndexApi.IndexGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAllIndicesResponse>("/index", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete an entire index
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="force">If set to \&quot;true\&quot;, delete index even if it is not empty. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void IndexIndexNameDelete(string indexName, string? force = default(string?), int operationIndex = 0)
        {
            IndexIndexNameDeleteWithHttpInfo(indexName, force);
        }

        /// <summary>
        ///  Delete an entire index
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="force">If set to \&quot;true\&quot;, delete index even if it is not empty. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LSO.SemanticSearch.Client.ApiResponse<Object> IndexIndexNameDeleteWithHttpInfo(string indexName, string? force = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
            {
                throw new LSO.SemanticSearch.Client.ApiException(400, "Missing required parameter 'indexName' when calling IndexApi->IndexIndexNameDelete");
            }

            LSO.SemanticSearch.Client.RequestOptions localVarRequestOptions = new LSO.SemanticSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index_name", LSO.SemanticSearch.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(LSO.SemanticSearch.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            localVarRequestOptions.Operation = "IndexApi.IndexIndexNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/index/{index_name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexIndexNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete an entire index
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="force">If set to \&quot;true\&quot;, delete index even if it is not empty. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IndexIndexNameDeleteAsync(string indexName, string? force = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await IndexIndexNameDeleteWithHttpInfoAsync(indexName, force, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete an entire index
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="force">If set to \&quot;true\&quot;, delete index even if it is not empty. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LSO.SemanticSearch.Client.ApiResponse<Object>> IndexIndexNameDeleteWithHttpInfoAsync(string indexName, string? force = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
            {
                throw new LSO.SemanticSearch.Client.ApiException(400, "Missing required parameter 'indexName' when calling IndexApi->IndexIndexNameDelete");
            }


            LSO.SemanticSearch.Client.RequestOptions localVarRequestOptions = new LSO.SemanticSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index_name", LSO.SemanticSearch.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(LSO.SemanticSearch.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            localVarRequestOptions.Operation = "IndexApi.IndexIndexNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/index/{index_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexIndexNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete an indexed documents.
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void IndexIndexNameDocumentsDocIdDelete(string indexName, string docId, int operationIndex = 0)
        {
            IndexIndexNameDocumentsDocIdDeleteWithHttpInfo(indexName, docId);
        }

        /// <summary>
        ///  Delete an indexed documents.
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LSO.SemanticSearch.Client.ApiResponse<Object> IndexIndexNameDocumentsDocIdDeleteWithHttpInfo(string indexName, string docId, int operationIndex = 0)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
            {
                throw new LSO.SemanticSearch.Client.ApiException(400, "Missing required parameter 'indexName' when calling IndexApi->IndexIndexNameDocumentsDocIdDelete");
            }

            // verify the required parameter 'docId' is set
            if (docId == null)
            {
                throw new LSO.SemanticSearch.Client.ApiException(400, "Missing required parameter 'docId' when calling IndexApi->IndexIndexNameDocumentsDocIdDelete");
            }

            LSO.SemanticSearch.Client.RequestOptions localVarRequestOptions = new LSO.SemanticSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index_name", LSO.SemanticSearch.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            localVarRequestOptions.PathParameters.Add("doc_id", LSO.SemanticSearch.Client.ClientUtils.ParameterToString(docId)); // path parameter

            localVarRequestOptions.Operation = "IndexApi.IndexIndexNameDocumentsDocIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/index/{index_name}/documents/{doc_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexIndexNameDocumentsDocIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete an indexed documents.
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IndexIndexNameDocumentsDocIdDeleteAsync(string indexName, string docId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await IndexIndexNameDocumentsDocIdDeleteWithHttpInfoAsync(indexName, docId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete an indexed documents.
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LSO.SemanticSearch.Client.ApiResponse<Object>> IndexIndexNameDocumentsDocIdDeleteWithHttpInfoAsync(string indexName, string docId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
            {
                throw new LSO.SemanticSearch.Client.ApiException(400, "Missing required parameter 'indexName' when calling IndexApi->IndexIndexNameDocumentsDocIdDelete");
            }

            // verify the required parameter 'docId' is set
            if (docId == null)
            {
                throw new LSO.SemanticSearch.Client.ApiException(400, "Missing required parameter 'docId' when calling IndexApi->IndexIndexNameDocumentsDocIdDelete");
            }


            LSO.SemanticSearch.Client.RequestOptions localVarRequestOptions = new LSO.SemanticSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index_name", LSO.SemanticSearch.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            localVarRequestOptions.PathParameters.Add("doc_id", LSO.SemanticSearch.Client.ClientUtils.ParameterToString(docId)); // path parameter

            localVarRequestOptions.Operation = "IndexApi.IndexIndexNameDocumentsDocIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/index/{index_name}/documents/{doc_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexIndexNameDocumentsDocIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Trigger indexing of document information.
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="createDocumentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void IndexIndexNameDocumentsPost(string indexName, string docId, CreateDocumentRequest? createDocumentRequest = default(CreateDocumentRequest?), int operationIndex = 0)
        {
            IndexIndexNameDocumentsPostWithHttpInfo(indexName, docId, createDocumentRequest);
        }

        /// <summary>
        ///  Trigger indexing of document information.
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="createDocumentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LSO.SemanticSearch.Client.ApiResponse<Object> IndexIndexNameDocumentsPostWithHttpInfo(string indexName, string docId, CreateDocumentRequest? createDocumentRequest = default(CreateDocumentRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
            {
                throw new LSO.SemanticSearch.Client.ApiException(400, "Missing required parameter 'indexName' when calling IndexApi->IndexIndexNameDocumentsPost");
            }

            // verify the required parameter 'docId' is set
            if (docId == null)
            {
                throw new LSO.SemanticSearch.Client.ApiException(400, "Missing required parameter 'docId' when calling IndexApi->IndexIndexNameDocumentsPost");
            }

            LSO.SemanticSearch.Client.RequestOptions localVarRequestOptions = new LSO.SemanticSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index_name", LSO.SemanticSearch.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            localVarRequestOptions.PathParameters.Add("doc_id", LSO.SemanticSearch.Client.ClientUtils.ParameterToString(docId)); // path parameter
            localVarRequestOptions.Data = createDocumentRequest;

            localVarRequestOptions.Operation = "IndexApi.IndexIndexNameDocumentsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/index/{index_name}/documents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexIndexNameDocumentsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Trigger indexing of document information.
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="createDocumentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IndexIndexNameDocumentsPostAsync(string indexName, string docId, CreateDocumentRequest? createDocumentRequest = default(CreateDocumentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await IndexIndexNameDocumentsPostWithHttpInfoAsync(indexName, docId, createDocumentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Trigger indexing of document information.
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="docId"></param>
        /// <param name="createDocumentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LSO.SemanticSearch.Client.ApiResponse<Object>> IndexIndexNameDocumentsPostWithHttpInfoAsync(string indexName, string docId, CreateDocumentRequest? createDocumentRequest = default(CreateDocumentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
            {
                throw new LSO.SemanticSearch.Client.ApiException(400, "Missing required parameter 'indexName' when calling IndexApi->IndexIndexNameDocumentsPost");
            }

            // verify the required parameter 'docId' is set
            if (docId == null)
            {
                throw new LSO.SemanticSearch.Client.ApiException(400, "Missing required parameter 'docId' when calling IndexApi->IndexIndexNameDocumentsPost");
            }


            LSO.SemanticSearch.Client.RequestOptions localVarRequestOptions = new LSO.SemanticSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index_name", LSO.SemanticSearch.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            localVarRequestOptions.PathParameters.Add("doc_id", LSO.SemanticSearch.Client.ClientUtils.ParameterToString(docId)); // path parameter
            localVarRequestOptions.Data = createDocumentRequest;

            localVarRequestOptions.Operation = "IndexApi.IndexIndexNameDocumentsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/index/{index_name}/documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexIndexNameDocumentsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create an index
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndexRequest">The index definition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IndexResponse</returns>
        public IndexResponse IndexPost(CreateIndexRequest? createIndexRequest = default(CreateIndexRequest?), int operationIndex = 0)
        {
            LSO.SemanticSearch.Client.ApiResponse<IndexResponse> localVarResponse = IndexPostWithHttpInfo(createIndexRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create an index
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndexRequest">The index definition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IndexResponse</returns>
        public LSO.SemanticSearch.Client.ApiResponse<IndexResponse> IndexPostWithHttpInfo(CreateIndexRequest? createIndexRequest = default(CreateIndexRequest?), int operationIndex = 0)
        {
            LSO.SemanticSearch.Client.RequestOptions localVarRequestOptions = new LSO.SemanticSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createIndexRequest;

            localVarRequestOptions.Operation = "IndexApi.IndexPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IndexResponse>("/index", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create an index
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndexRequest">The index definition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndexResponse</returns>
        public async System.Threading.Tasks.Task<IndexResponse> IndexPostAsync(CreateIndexRequest? createIndexRequest = default(CreateIndexRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LSO.SemanticSearch.Client.ApiResponse<IndexResponse> localVarResponse = await IndexPostWithHttpInfoAsync(createIndexRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create an index
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndexRequest">The index definition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndexResponse)</returns>
        public async System.Threading.Tasks.Task<LSO.SemanticSearch.Client.ApiResponse<IndexResponse>> IndexPostWithHttpInfoAsync(CreateIndexRequest? createIndexRequest = default(CreateIndexRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LSO.SemanticSearch.Client.RequestOptions localVarRequestOptions = new LSO.SemanticSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createIndexRequest;

            localVarRequestOptions.Operation = "IndexApi.IndexPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IndexResponse>("/index", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
