/*
 * Semantic Search - Searcher HTTP API
 *
 * The searcher component HTTP API of the semantic search Service.  The service depends on a database backend. If a mere vector store (e.g. [Qdrant](https://qdrant.tech/)), instead of a full fledged search engine (e.g. [Elasticsearch](https://www.elastic.co/)), is configured, some advanced functionalities of the API have no effect. This is noted where appropriate, referring to the former as _simple database_ and the latter as _full database_. 
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: contact@leftshift.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using LSO.SemanticSearch.Client;
using LSO.SemanticSearch.Model;

namespace LSO.SemanticSearch.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for documents
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="searchQueryRequest">The search query. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultsResponse</returns>
        SearchResultsResponse SearchIndex(string indexName, SearchQueryRequest? searchQueryRequest = default(SearchQueryRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for documents
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="searchQueryRequest">The search query. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultsResponse</returns>
        ApiResponse<SearchResultsResponse> SearchIndexWithHttpInfo(string indexName, SearchQueryRequest? searchQueryRequest = default(SearchQueryRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for documents
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="searchQueryRequest">The search query. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultsResponse</returns>
        System.Threading.Tasks.Task<SearchResultsResponse> SearchIndexAsync(string indexName, SearchQueryRequest? searchQueryRequest = default(SearchQueryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for documents
        /// </remarks>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="searchQueryRequest">The search query. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResultsResponse>> SearchIndexWithHttpInfoAsync(string indexName, SearchQueryRequest? searchQueryRequest = default(SearchQueryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : ISearchApiSync, ISearchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : ISearchApi
    {
        private LSO.SemanticSearch.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(string basePath)
        {
            this.Configuration = LSO.SemanticSearch.Client.Configuration.MergeConfigurations(
                LSO.SemanticSearch.Client.GlobalConfiguration.Instance,
                new LSO.SemanticSearch.Client.Configuration { BasePath = basePath }
            );
            this.Client = new LSO.SemanticSearch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new LSO.SemanticSearch.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = LSO.SemanticSearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(LSO.SemanticSearch.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = LSO.SemanticSearch.Client.Configuration.MergeConfigurations(
                LSO.SemanticSearch.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new LSO.SemanticSearch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new LSO.SemanticSearch.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = LSO.SemanticSearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SearchApi(LSO.SemanticSearch.Client.ISynchronousClient client, LSO.SemanticSearch.Client.IAsynchronousClient asyncClient, LSO.SemanticSearch.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = LSO.SemanticSearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public LSO.SemanticSearch.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public LSO.SemanticSearch.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LSO.SemanticSearch.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LSO.SemanticSearch.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Search for documents
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="searchQueryRequest">The search query. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultsResponse</returns>
        public SearchResultsResponse SearchIndex(string indexName, SearchQueryRequest? searchQueryRequest = default(SearchQueryRequest?), int operationIndex = 0)
        {
            LSO.SemanticSearch.Client.ApiResponse<SearchResultsResponse> localVarResponse = SearchIndexWithHttpInfo(indexName, searchQueryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for documents
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="searchQueryRequest">The search query. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultsResponse</returns>
        public LSO.SemanticSearch.Client.ApiResponse<SearchResultsResponse> SearchIndexWithHttpInfo(string indexName, SearchQueryRequest? searchQueryRequest = default(SearchQueryRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
            {
                throw new LSO.SemanticSearch.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchApi->SearchIndex");
            }

            LSO.SemanticSearch.Client.RequestOptions localVarRequestOptions = new LSO.SemanticSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index_name", LSO.SemanticSearch.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            localVarRequestOptions.Data = searchQueryRequest;

            localVarRequestOptions.Operation = "SearchApi.SearchIndex";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchResultsResponse>("/search/{index_name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Search for documents
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="searchQueryRequest">The search query. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultsResponse</returns>
        public async System.Threading.Tasks.Task<SearchResultsResponse> SearchIndexAsync(string indexName, SearchQueryRequest? searchQueryRequest = default(SearchQueryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LSO.SemanticSearch.Client.ApiResponse<SearchResultsResponse> localVarResponse = await SearchIndexWithHttpInfoAsync(indexName, searchQueryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for documents
        /// </summary>
        /// <exception cref="LSO.SemanticSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexName"></param>
        /// <param name="searchQueryRequest">The search query. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultsResponse)</returns>
        public async System.Threading.Tasks.Task<LSO.SemanticSearch.Client.ApiResponse<SearchResultsResponse>> SearchIndexWithHttpInfoAsync(string indexName, SearchQueryRequest? searchQueryRequest = default(SearchQueryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
            {
                throw new LSO.SemanticSearch.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchApi->SearchIndex");
            }


            LSO.SemanticSearch.Client.RequestOptions localVarRequestOptions = new LSO.SemanticSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LSO.SemanticSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index_name", LSO.SemanticSearch.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            localVarRequestOptions.Data = searchQueryRequest;

            localVarRequestOptions.Operation = "SearchApi.SearchIndex";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchResultsResponse>("/search/{index_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
