/*
 * Semantic Search - Searcher HTTP API
 *
 * The searcher component HTTP API of the semantic search Service.  The service depends on a database backend. If a mere vector store (e.g. [Qdrant](https://qdrant.tech/)), instead of a full fledged search engine (e.g. [Elasticsearch](https://www.elastic.co/)), is configured, some advanced functionalities of the API have no effect. This is noted where appropriate, referring to the former as _simple database_ and the latter as _full database_. 
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: contact@leftshift.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LSO.SemanticSearch.Client.OpenAPIDateConverter;

namespace LSO.SemanticSearch.Model
{
    /// <summary>
    /// A filter specifying a date range for the given field.
    /// </summary>
    [DataContract(Name = "DateFilter")]
    public partial class DateFilter : IEquatable<DateFilter>, IValidatableObject
    {
        /// <summary>
        /// Wether the filter must (only documents matching the filter are returned) or must not hold (only documents not matching the filter are returned).
        /// </summary>
        /// <value>Wether the filter must (only documents matching the filter are returned) or must not hold (only documents not matching the filter are returned).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModalTypeEnum
        {
            /// <summary>
            /// Enum MUST for value: MUST
            /// </summary>
            [EnumMember(Value = "MUST")]
            MUST = 1,

            /// <summary>
            /// Enum MUSTNOT for value: MUSTNOT
            /// </summary>
            [EnumMember(Value = "MUSTNOT")]
            MUSTNOT = 2
        }


        /// <summary>
        /// Wether the filter must (only documents matching the filter are returned) or must not hold (only documents not matching the filter are returned).
        /// </summary>
        /// <value>Wether the filter must (only documents matching the filter are returned) or must not hold (only documents not matching the filter are returned).</value>
        [DataMember(Name = "modal_type", EmitDefaultValue = false)]
        public ModalTypeEnum? ModalType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DateFilter" /> class.
        /// </summary>
        /// <param name="fieldName">The name of the indexed field to be filtered. Nested fields in a JSON structure are accessed with a &#39;.&#39; as separator, e.g. properties.date..</param>
        /// <param name="start">Start timestamp in any ISO 8601 compatible format. (default to &quot;1900-01-01&quot;).</param>
        /// <param name="end">End timestamp in any ISO 8601 compatible format. (default to &quot;2100-01-01&quot;).</param>
        /// <param name="modalType">Wether the filter must (only documents matching the filter are returned) or must not hold (only documents not matching the filter are returned). (default to ModalTypeEnum.MUST).</param>
        public DateFilter(string fieldName = default(string), string start = @"1900-01-01", string end = @"2100-01-01", ModalTypeEnum? modalType = ModalTypeEnum.MUST)
        {
            this.FieldName = fieldName;
            // use default value if no "start" provided
            this.Start = start ?? @"1900-01-01";
            // use default value if no "end" provided
            this.End = end ?? @"2100-01-01";
            this.ModalType = modalType;
        }

        /// <summary>
        /// The name of the indexed field to be filtered. Nested fields in a JSON structure are accessed with a &#39;.&#39; as separator, e.g. properties.date.
        /// </summary>
        /// <value>The name of the indexed field to be filtered. Nested fields in a JSON structure are accessed with a &#39;.&#39; as separator, e.g. properties.date.</value>
        [DataMember(Name = "field_name", EmitDefaultValue = false)]
        public string FieldName { get; set; }

        /// <summary>
        /// Start timestamp in any ISO 8601 compatible format.
        /// </summary>
        /// <value>Start timestamp in any ISO 8601 compatible format.</value>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public string Start { get; set; }

        /// <summary>
        /// End timestamp in any ISO 8601 compatible format.
        /// </summary>
        /// <value>End timestamp in any ISO 8601 compatible format.</value>
        [DataMember(Name = "end", EmitDefaultValue = false)]
        public string End { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DateFilter {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  ModalType: ").Append(ModalType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateFilter);
        }

        /// <summary>
        /// Returns true if DateFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of DateFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateFilter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.ModalType == input.ModalType ||
                    this.ModalType.Equals(input.ModalType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldName != null)
                {
                    hashCode = (hashCode * 59) + this.FieldName.GetHashCode();
                }
                if (this.Start != null)
                {
                    hashCode = (hashCode * 59) + this.Start.GetHashCode();
                }
                if (this.End != null)
                {
                    hashCode = (hashCode * 59) + this.End.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ModalType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
