/*
 * Semantic Search - Searcher HTTP API
 *
 * The searcher component HTTP API of the semantic search Service.  The service depends on a database backend. If a mere vector store (e.g. [Qdrant](https://qdrant.tech/)), instead of a full fledged search engine (e.g. [Elasticsearch](https://www.elastic.co/)), is configured, some advanced functionalities of the API have no effect. This is noted where appropriate, referring to the former as _simple database_ and the latter as _full database_. 
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: contact@leftshift.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LSO.SemanticSearch.Client.OpenAPIDateConverter;

namespace LSO.SemanticSearch.Model
{
    /// <summary>
    /// The settings to control postprocessing of the raw search results.
    /// </summary>
    [DataContract(Name = "PostprocessorSettings")]
    public partial class PostprocessorSettings : IEquatable<PostprocessorSettings>, IValidatableObject
    {
        /// <summary>
        /// The type of score normalization to perform.   * NO: Do not perform any normalization and return the raw search scores.   * SIGMOID: Sigmoid based normalization in the interval (0, 1). Behavior can be tuned by setting an appropriate offset and scale. 
        /// </summary>
        /// <value>The type of score normalization to perform.   * NO: Do not perform any normalization and return the raw search scores.   * SIGMOID: Sigmoid based normalization in the interval (0, 1). Behavior can be tuned by setting an appropriate offset and scale. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NormalizerTypeEnum
        {
            /// <summary>
            /// Enum NO for value: NO
            /// </summary>
            [EnumMember(Value = "NO")]
            NO = 1,

            /// <summary>
            /// Enum SIGMOID for value: SIGMOID
            /// </summary>
            [EnumMember(Value = "SIGMOID")]
            SIGMOID = 2
        }


        /// <summary>
        /// The type of score normalization to perform.   * NO: Do not perform any normalization and return the raw search scores.   * SIGMOID: Sigmoid based normalization in the interval (0, 1). Behavior can be tuned by setting an appropriate offset and scale. 
        /// </summary>
        /// <value>The type of score normalization to perform.   * NO: Do not perform any normalization and return the raw search scores.   * SIGMOID: Sigmoid based normalization in the interval (0, 1). Behavior can be tuned by setting an appropriate offset and scale. </value>
        [DataMember(Name = "normalizer_type", EmitDefaultValue = false)]
        public NormalizerTypeEnum? NormalizerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostprocessorSettings" /> class.
        /// </summary>
        /// <param name="normalizerType">The type of score normalization to perform.   * NO: Do not perform any normalization and return the raw search scores.   * SIGMOID: Sigmoid based normalization in the interval (0, 1). Behavior can be tuned by setting an appropriate offset and scale.  (default to NormalizerTypeEnum.NO).</param>
        /// <param name="normalizerSigmoidOffset">The offset in 1 / ( 1 + exp(-(x-offset)/scale) ) used for the sigmoid normalizer. (default to 0.5M).</param>
        /// <param name="normalizerSigmoidScale">The scale in 1 / ( 1 + exp(-(x-offset)/scale) ) used for the sigmoid normalizer. (default to 1.0M).</param>
        public PostprocessorSettings(NormalizerTypeEnum? normalizerType = NormalizerTypeEnum.NO, decimal normalizerSigmoidOffset = 0.5M, decimal normalizerSigmoidScale = 1.0M)
        {
            this.NormalizerType = normalizerType;
            this.NormalizerSigmoidOffset = normalizerSigmoidOffset;
            this.NormalizerSigmoidScale = normalizerSigmoidScale;
        }

        /// <summary>
        /// The offset in 1 / ( 1 + exp(-(x-offset)/scale) ) used for the sigmoid normalizer.
        /// </summary>
        /// <value>The offset in 1 / ( 1 + exp(-(x-offset)/scale) ) used for the sigmoid normalizer.</value>
        [DataMember(Name = "normalizer_sigmoid_offset", EmitDefaultValue = false)]
        public decimal NormalizerSigmoidOffset { get; set; }

        /// <summary>
        /// The scale in 1 / ( 1 + exp(-(x-offset)/scale) ) used for the sigmoid normalizer.
        /// </summary>
        /// <value>The scale in 1 / ( 1 + exp(-(x-offset)/scale) ) used for the sigmoid normalizer.</value>
        [DataMember(Name = "normalizer_sigmoid_scale", EmitDefaultValue = false)]
        public decimal NormalizerSigmoidScale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostprocessorSettings {\n");
            sb.Append("  NormalizerType: ").Append(NormalizerType).Append("\n");
            sb.Append("  NormalizerSigmoidOffset: ").Append(NormalizerSigmoidOffset).Append("\n");
            sb.Append("  NormalizerSigmoidScale: ").Append(NormalizerSigmoidScale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostprocessorSettings);
        }

        /// <summary>
        /// Returns true if PostprocessorSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of PostprocessorSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostprocessorSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NormalizerType == input.NormalizerType ||
                    this.NormalizerType.Equals(input.NormalizerType)
                ) && 
                (
                    this.NormalizerSigmoidOffset == input.NormalizerSigmoidOffset ||
                    this.NormalizerSigmoidOffset.Equals(input.NormalizerSigmoidOffset)
                ) && 
                (
                    this.NormalizerSigmoidScale == input.NormalizerSigmoidScale ||
                    this.NormalizerSigmoidScale.Equals(input.NormalizerSigmoidScale)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.NormalizerType.GetHashCode();
                hashCode = (hashCode * 59) + this.NormalizerSigmoidOffset.GetHashCode();
                hashCode = (hashCode * 59) + this.NormalizerSigmoidScale.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
