/*
 * Semantic Search - Searcher HTTP API
 *
 * The searcher component HTTP API of the semantic search Service.  The service depends on a database backend. If a mere vector store (e.g. [Qdrant](https://qdrant.tech/)), instead of a full fledged search engine (e.g. [Elasticsearch](https://www.elastic.co/)), is configured, some advanced functionalities of the API have no effect. This is noted where appropriate, referring to the former as _simple database_ and the latter as _full database_. 
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: contact@leftshift.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LSO.SemanticSearch.Client.OpenAPIDateConverter;

namespace LSO.SemanticSearch.Model
{
    /// <summary>
    /// The settings to control preprocessing of the raw query.
    /// </summary>
    [DataContract(Name = "PreprocessorSettings")]
    public partial class PreprocessorSettings : IEquatable<PreprocessorSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreprocessorSettings" /> class.
        /// </summary>
        /// <param name="maxQueryLen">The maximum length of text queries. Longer queries will be truncated. If set to 0, no truncation will be performed. (default to 0).</param>
        public PreprocessorSettings(int maxQueryLen = 0)
        {
            this.MaxQueryLen = maxQueryLen;
        }

        /// <summary>
        /// The maximum length of text queries. Longer queries will be truncated. If set to 0, no truncation will be performed.
        /// </summary>
        /// <value>The maximum length of text queries. Longer queries will be truncated. If set to 0, no truncation will be performed.</value>
        [DataMember(Name = "max_query_len", EmitDefaultValue = false)]
        public int MaxQueryLen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PreprocessorSettings {\n");
            sb.Append("  MaxQueryLen: ").Append(MaxQueryLen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreprocessorSettings);
        }

        /// <summary>
        /// Returns true if PreprocessorSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of PreprocessorSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreprocessorSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaxQueryLen == input.MaxQueryLen ||
                    this.MaxQueryLen.Equals(input.MaxQueryLen)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MaxQueryLen.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaxQueryLen (int) minimum
            if (this.MaxQueryLen < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxQueryLen, must be a value greater than or equal to 0.", new [] { "MaxQueryLen" });
            }

            yield break;
        }
    }

}
