/*
 * Semantic Search - Searcher HTTP API
 *
 * The searcher component HTTP API of the semantic search Service.  The service depends on a database backend. If a mere vector store (e.g. [Qdrant](https://qdrant.tech/)), instead of a full fledged search engine (e.g. [Elasticsearch](https://www.elastic.co/)), is configured, some advanced functionalities of the API have no effect. This is noted where appropriate, referring to the former as _simple database_ and the latter as _full database_. 
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: contact@leftshift.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LSO.SemanticSearch.Client.OpenAPIDateConverter;

namespace LSO.SemanticSearch.Model
{
    /// <summary>
    /// SearchQueryRequest
    /// </summary>
    [DataContract(Name = "SearchQueryRequest")]
    public partial class SearchQueryRequest : IEquatable<SearchQueryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchQueryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchQueryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchQueryRequest" /> class.
        /// </summary>
        /// <param name="textQueries">The main text queries. A combination of semantic and full text search is performed depending on the settings.  &gt; **_NOTE:_**  For simple database backends, only a single semantic query against the default content_text_ field is performed at the moment.  (required).</param>
        /// <param name="filterQueries">A list of filters. .</param>
        /// <param name="filterQuery">The filter query. It can be any Elasticsearch [query string syntax](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-query-string-query.html#query-string-syntax). Beside explicit meta data field, all default fields can be used as well: document_id_, content_text_, content_json_.  &gt; **_NOTE:_**  This only affects full database backends and will be replaced by the filter_queries parameter in the future.  (default to &quot;&quot;).</param>
        /// <param name="offset">The count of results which should be omitted. (default to 0).</param>
        /// <param name="limit">The number of results to retrieve. (default to 10).</param>
        /// <param name="minScore">The minimum score of the obtained results. Any score below this threshold will not be returned. (default to 0.5M).</param>
        /// <param name="isDistinct">If set to true, only the highest scoring result for each indexed document is returned. If set to false, the same indexed document might yield multiple hits. (default to false).</param>
        /// <param name="searchSettings">searchSettings.</param>
        /// <param name="preprocessorSettings">preprocessorSettings.</param>
        /// <param name="postprocessorSettings">postprocessorSettings.</param>
        public SearchQueryRequest(List<TextQuery> textQueries = default(List<TextQuery>), List<SearchQueryRequestFilterQueriesInner> filterQueries = default(List<SearchQueryRequestFilterQueriesInner>), string filterQuery = @"", long offset = 0, long limit = 10, decimal minScore = 0.5M, bool isDistinct = false, SearchSettings searchSettings = default(SearchSettings), PreprocessorSettings preprocessorSettings = default(PreprocessorSettings), PostprocessorSettings postprocessorSettings = default(PostprocessorSettings))
        {
            // to ensure "textQueries" is required (not null)
            if (textQueries == null)
            {
                throw new ArgumentNullException("textQueries is a required property for SearchQueryRequest and cannot be null");
            }
            this.TextQueries = textQueries;
            this.FilterQueries = filterQueries;
            // use default value if no "filterQuery" provided
            this.FilterQuery = filterQuery ?? @"";
            this.Offset = offset;
            this.Limit = limit;
            this.MinScore = minScore;
            this.IsDistinct = isDistinct;
            this.SearchSettings = searchSettings;
            this.PreprocessorSettings = preprocessorSettings;
            this.PostprocessorSettings = postprocessorSettings;
        }

        /// <summary>
        /// The main text queries. A combination of semantic and full text search is performed depending on the settings.  &gt; **_NOTE:_**  For simple database backends, only a single semantic query against the default content_text_ field is performed at the moment. 
        /// </summary>
        /// <value>The main text queries. A combination of semantic and full text search is performed depending on the settings.  &gt; **_NOTE:_**  For simple database backends, only a single semantic query against the default content_text_ field is performed at the moment. </value>
        [DataMember(Name = "text_queries", IsRequired = true, EmitDefaultValue = true)]
        public List<TextQuery> TextQueries { get; set; }

        /// <summary>
        /// A list of filters. 
        /// </summary>
        /// <value>A list of filters. </value>
        [DataMember(Name = "filter_queries", EmitDefaultValue = false)]
        public List<SearchQueryRequestFilterQueriesInner> FilterQueries { get; set; }

        /// <summary>
        /// The filter query. It can be any Elasticsearch [query string syntax](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-query-string-query.html#query-string-syntax). Beside explicit meta data field, all default fields can be used as well: document_id_, content_text_, content_json_.  &gt; **_NOTE:_**  This only affects full database backends and will be replaced by the filter_queries parameter in the future. 
        /// </summary>
        /// <value>The filter query. It can be any Elasticsearch [query string syntax](https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-query-string-query.html#query-string-syntax). Beside explicit meta data field, all default fields can be used as well: document_id_, content_text_, content_json_.  &gt; **_NOTE:_**  This only affects full database backends and will be replaced by the filter_queries parameter in the future. </value>
        [DataMember(Name = "filter_query", EmitDefaultValue = false)]
        public string FilterQuery { get; set; }

        /// <summary>
        /// The count of results which should be omitted.
        /// </summary>
        /// <value>The count of results which should be omitted.</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public long Offset { get; set; }

        /// <summary>
        /// The number of results to retrieve.
        /// </summary>
        /// <value>The number of results to retrieve.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public long Limit { get; set; }

        /// <summary>
        /// The minimum score of the obtained results. Any score below this threshold will not be returned.
        /// </summary>
        /// <value>The minimum score of the obtained results. Any score below this threshold will not be returned.</value>
        [DataMember(Name = "min_score", EmitDefaultValue = false)]
        public decimal MinScore { get; set; }

        /// <summary>
        /// If set to true, only the highest scoring result for each indexed document is returned. If set to false, the same indexed document might yield multiple hits.
        /// </summary>
        /// <value>If set to true, only the highest scoring result for each indexed document is returned. If set to false, the same indexed document might yield multiple hits.</value>
        [DataMember(Name = "is_distinct", EmitDefaultValue = true)]
        public bool IsDistinct { get; set; }

        /// <summary>
        /// Gets or Sets SearchSettings
        /// </summary>
        [DataMember(Name = "search_settings", EmitDefaultValue = false)]
        public SearchSettings SearchSettings { get; set; }

        /// <summary>
        /// Gets or Sets PreprocessorSettings
        /// </summary>
        [DataMember(Name = "preprocessor_settings", EmitDefaultValue = false)]
        public PreprocessorSettings PreprocessorSettings { get; set; }

        /// <summary>
        /// Gets or Sets PostprocessorSettings
        /// </summary>
        [DataMember(Name = "postprocessor_settings", EmitDefaultValue = false)]
        public PostprocessorSettings PostprocessorSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchQueryRequest {\n");
            sb.Append("  TextQueries: ").Append(TextQueries).Append("\n");
            sb.Append("  FilterQueries: ").Append(FilterQueries).Append("\n");
            sb.Append("  FilterQuery: ").Append(FilterQuery).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  MinScore: ").Append(MinScore).Append("\n");
            sb.Append("  IsDistinct: ").Append(IsDistinct).Append("\n");
            sb.Append("  SearchSettings: ").Append(SearchSettings).Append("\n");
            sb.Append("  PreprocessorSettings: ").Append(PreprocessorSettings).Append("\n");
            sb.Append("  PostprocessorSettings: ").Append(PostprocessorSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchQueryRequest);
        }

        /// <summary>
        /// Returns true if SearchQueryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchQueryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchQueryRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TextQueries == input.TextQueries ||
                    this.TextQueries != null &&
                    input.TextQueries != null &&
                    this.TextQueries.SequenceEqual(input.TextQueries)
                ) && 
                (
                    this.FilterQueries == input.FilterQueries ||
                    this.FilterQueries != null &&
                    input.FilterQueries != null &&
                    this.FilterQueries.SequenceEqual(input.FilterQueries)
                ) && 
                (
                    this.FilterQuery == input.FilterQuery ||
                    (this.FilterQuery != null &&
                    this.FilterQuery.Equals(input.FilterQuery))
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.MinScore == input.MinScore ||
                    this.MinScore.Equals(input.MinScore)
                ) && 
                (
                    this.IsDistinct == input.IsDistinct ||
                    this.IsDistinct.Equals(input.IsDistinct)
                ) && 
                (
                    this.SearchSettings == input.SearchSettings ||
                    (this.SearchSettings != null &&
                    this.SearchSettings.Equals(input.SearchSettings))
                ) && 
                (
                    this.PreprocessorSettings == input.PreprocessorSettings ||
                    (this.PreprocessorSettings != null &&
                    this.PreprocessorSettings.Equals(input.PreprocessorSettings))
                ) && 
                (
                    this.PostprocessorSettings == input.PostprocessorSettings ||
                    (this.PostprocessorSettings != null &&
                    this.PostprocessorSettings.Equals(input.PostprocessorSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TextQueries != null)
                {
                    hashCode = (hashCode * 59) + this.TextQueries.GetHashCode();
                }
                if (this.FilterQueries != null)
                {
                    hashCode = (hashCode * 59) + this.FilterQueries.GetHashCode();
                }
                if (this.FilterQuery != null)
                {
                    hashCode = (hashCode * 59) + this.FilterQuery.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Offset.GetHashCode();
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                hashCode = (hashCode * 59) + this.MinScore.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDistinct.GetHashCode();
                if (this.SearchSettings != null)
                {
                    hashCode = (hashCode * 59) + this.SearchSettings.GetHashCode();
                }
                if (this.PreprocessorSettings != null)
                {
                    hashCode = (hashCode * 59) + this.PreprocessorSettings.GetHashCode();
                }
                if (this.PostprocessorSettings != null)
                {
                    hashCode = (hashCode * 59) + this.PostprocessorSettings.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Limit (long) maximum
            if (this.Limit > (long)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Limit, must be a value less than or equal to 100.", new [] { "Limit" });
            }

            // Limit (long) minimum
            if (this.Limit < (long)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Limit, must be a value greater than or equal to 1.", new [] { "Limit" });
            }

            // MinScore (decimal) maximum
            if (this.MinScore > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinScore, must be a value less than or equal to 1.", new [] { "MinScore" });
            }

            // MinScore (decimal) minimum
            if (this.MinScore < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinScore, must be a value greater than or equal to 0.", new [] { "MinScore" });
            }

            yield break;
        }
    }

}
