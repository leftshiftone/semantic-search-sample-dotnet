/*
 * Semantic Search - Searcher HTTP API
 *
 * The searcher component HTTP API of the semantic search Service.  The service depends on a database backend. If a mere vector store (e.g. [Qdrant](https://qdrant.tech/)), instead of a full fledged search engine (e.g. [Elasticsearch](https://www.elastic.co/)), is configured, some advanced functionalities of the API have no effect. This is noted where appropriate, referring to the former as _simple database_ and the latter as _full database_. 
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: contact@leftshift.one
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LSO.SemanticSearch.Client.OpenAPIDateConverter;

namespace LSO.SemanticSearch.Model
{
    /// <summary>
    /// The representation of a semantic as well as full text query.
    /// </summary>
    [DataContract(Name = "TextQuery")]
    public partial class TextQuery : IEquatable<TextQuery>, IValidatableObject
    {
        /// <summary>
        /// The amount of fuzziness for the full text search part.   * 0, 1, 2, 3: Number of allowed edits.   * AUTO: Variable number of edits depending on token lengths. 
        /// </summary>
        /// <value>The amount of fuzziness for the full text search part.   * 0, 1, 2, 3: Number of allowed edits.   * AUTO: Variable number of edits depending on token lengths. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FuzzinessEnum
        {
            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            [EnumMember(Value = "0")]
            _0 = 1,

            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 2,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 3,

            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 4,

            /// <summary>
            /// Enum AUTO for value: AUTO
            /// </summary>
            [EnumMember(Value = "AUTO")]
            AUTO = 5
        }


        /// <summary>
        /// The amount of fuzziness for the full text search part.   * 0, 1, 2, 3: Number of allowed edits.   * AUTO: Variable number of edits depending on token lengths. 
        /// </summary>
        /// <value>The amount of fuzziness for the full text search part.   * 0, 1, 2, 3: Number of allowed edits.   * AUTO: Variable number of edits depending on token lengths. </value>
        [DataMember(Name = "fuzziness", EmitDefaultValue = false)]
        public FuzzinessEnum? Fuzziness { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextQuery" /> class.
        /// </summary>
        /// <param name="fieldName">The name of the indexed text field to be searched. The default value refers to the well known field &#39;content_text_&#39;, containing the document text content. (default to &quot;content_text_&quot;).</param>
        /// <param name="query">The main search query for this field..</param>
        /// <param name="semanticWeight">The weight multiplier for the semantic part of this query. If set to 0, no semantic search is performed for this field. (default to 1.0M).</param>
        /// <param name="fullTextWeight">The weight multiplier for the full text search part of this query. If set to 0, no full text search is performed for this field. (default to 1.0M).</param>
        /// <param name="fuzziness">The amount of fuzziness for the full text search part.   * 0, 1, 2, 3: Number of allowed edits.   * AUTO: Variable number of edits depending on token lengths.  (default to FuzzinessEnum.AUTO).</param>
        public TextQuery(string fieldName = @"content_text_", string query = default(string), decimal semanticWeight = 1.0M, decimal fullTextWeight = 1.0M, FuzzinessEnum? fuzziness = FuzzinessEnum.AUTO)
        {
            // use default value if no "fieldName" provided
            this.FieldName = fieldName ?? @"content_text_";
            this.Query = query;
            this.SemanticWeight = semanticWeight;
            this.FullTextWeight = fullTextWeight;
            this.Fuzziness = fuzziness;
        }

        /// <summary>
        /// The name of the indexed text field to be searched. The default value refers to the well known field &#39;content_text_&#39;, containing the document text content.
        /// </summary>
        /// <value>The name of the indexed text field to be searched. The default value refers to the well known field &#39;content_text_&#39;, containing the document text content.</value>
        [DataMember(Name = "field_name", EmitDefaultValue = false)]
        public string FieldName { get; set; }

        /// <summary>
        /// The main search query for this field.
        /// </summary>
        /// <value>The main search query for this field.</value>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public string Query { get; set; }

        /// <summary>
        /// The weight multiplier for the semantic part of this query. If set to 0, no semantic search is performed for this field.
        /// </summary>
        /// <value>The weight multiplier for the semantic part of this query. If set to 0, no semantic search is performed for this field.</value>
        [DataMember(Name = "semantic_weight", EmitDefaultValue = false)]
        public decimal SemanticWeight { get; set; }

        /// <summary>
        /// The weight multiplier for the full text search part of this query. If set to 0, no full text search is performed for this field.
        /// </summary>
        /// <value>The weight multiplier for the full text search part of this query. If set to 0, no full text search is performed for this field.</value>
        [DataMember(Name = "full_text_weight", EmitDefaultValue = false)]
        public decimal FullTextWeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TextQuery {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  SemanticWeight: ").Append(SemanticWeight).Append("\n");
            sb.Append("  FullTextWeight: ").Append(FullTextWeight).Append("\n");
            sb.Append("  Fuzziness: ").Append(Fuzziness).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextQuery);
        }

        /// <summary>
        /// Returns true if TextQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of TextQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextQuery input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.SemanticWeight == input.SemanticWeight ||
                    this.SemanticWeight.Equals(input.SemanticWeight)
                ) && 
                (
                    this.FullTextWeight == input.FullTextWeight ||
                    this.FullTextWeight.Equals(input.FullTextWeight)
                ) && 
                (
                    this.Fuzziness == input.Fuzziness ||
                    this.Fuzziness.Equals(input.Fuzziness)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldName != null)
                {
                    hashCode = (hashCode * 59) + this.FieldName.GetHashCode();
                }
                if (this.Query != null)
                {
                    hashCode = (hashCode * 59) + this.Query.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SemanticWeight.GetHashCode();
                hashCode = (hashCode * 59) + this.FullTextWeight.GetHashCode();
                hashCode = (hashCode * 59) + this.Fuzziness.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SemanticWeight (decimal) minimum
            if (this.SemanticWeight < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SemanticWeight, must be a value greater than or equal to 0.", new [] { "SemanticWeight" });
            }

            // FullTextWeight (decimal) minimum
            if (this.FullTextWeight < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FullTextWeight, must be a value greater than or equal to 0.", new [] { "FullTextWeight" });
            }

            yield break;
        }
    }

}
