openapi: 3.0.3
info:
  title: Semantic Search - Indexer HTTP API
  version: 1.5.0
  description: |
    The indexer component HTTP API of the semantic search service.

    The service depends on a database backend. If a mere vector store (e.g. [Qdrant](https://qdrant.tech/)), instead of a full fledged search engine (e.g. [Elasticsearch](https://www.elastic.co/)), is configured, some advanced functionalities of the API have no effect. This is noted where appropriate, referring to the former as _simple database_ and the latter as _full database_.
  contact:
    email: contact@leftshift.one
servers:
  - url: /api/v1

tags:
  - name: Index
    description: Index endpoints
paths:
  /index:
    post:
      tags:
        - Index
      description: Create an index
      operationId: createIndex
      requestBody:
        description: The index definition.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIndexRequest'
      responses:
        '200':
          description: The created index definition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Unexpected'
    get:
      tags:
        - Index
      description: List all indices
      operationId: listIndices
      responses:
        '200':
          description: Plain list of all indices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllIndicesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Unexpected'
  /index/{index_name}:
    delete:
      tags:
        - Index
      description: Delete an entire index
      operationId: deleteIndex
      parameters:
        - $ref: '#/components/parameters/path_index_name'
        - name: force
          in: query
          schema:
            type: string
            enum:
              - true
              - false
            default: false
          description: If set to "true", delete index even if it is not empty.
      responses:
        '204':
          description: Index has been deleted.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unexpected'
  /index/{index_name}/documents:
    post:
      tags:
        - Index
      description: Trigger indexing of document information.
      operationId: createDocument
      parameters:
        - $ref: '#/components/parameters/path_index_name'
        - $ref: '#/components/parameters/path_doc_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
      responses:
        '204':
          description: Document has been indexed.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unexpected'
  /index/{index_name}/documents/{doc_id}:
    delete:
      tags:
        - Index
      description: Delete an indexed documents.
      operationId: deleteDocument
      parameters:
        - $ref: '#/components/parameters/path_index_name'
        - $ref: '#/components/parameters/path_doc_id'
      responses:
        '204':
          description: Document has been deleted from the index.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unexpected'
components:
  parameters:
    path_index_name:
      name: index_name
      in: path
      required: true
      schema:
        type: string
    path_doc_id:
      name: doc_id
      in: path
      required: true
      schema:
        type: string
  responses:
    BadRequest:
      description: The provided input was wrong.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unexpected:
      description: An unexpected error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    CreateIndexRequest:
      required:
        - name
        - fields
      type: object
      description: |
        Create a new index with given field type mapping. Default fields document_id_, content_text_ and file_name_ are added automatically.

        > **_NOTE:_**  For simple database backends, the field mapping has no effect at the moment.
      properties:
        name:
          type: string
          description: The index name.
        fields:
          type: array
          items:
            $ref: '#/components/schemas/IndexFieldMapping'
    IndexFieldMapping:
      required:
        - field_name
        - type
      type: object
      properties:
        field_name:
          type: string
          description: The name of the field.
        type:
          type: string
          enum:
            - BOOLEAN
            - INTEGER
            - FLOAT
            - TIMESTAMP
            - KEYWORD
            - TEXT
            - JSON
            - GEO_POINT
          description: >
            The data type of the field. Possible values:
              * BOOLEAN, INTEGER, FLOAT: The familiar data types.
              * TIMESTAMP: Formatted either as yyyy-MM-ddTHH:mm:ss.SSSSSSZ or yyyy-MM-dd
              * JSON: A general, structured element.
              * GEO_POINT: Latitude and longitude coordinates
              * KEYWORD: Text field, which is not analyzed. Suited for filter queries.
              * TEXT: Text field, which is analyzed as well as (possibly) semantically embedded. Suited for full text and semantic search.
    IndexResponse:
      required:
        - name
        - fields
      type: object
      properties:
        name:
          type: string
          description: The index name.
        fields:
          type: array
          items:
            $ref: '#/components/schemas/IndexFieldMapping'
    ListAllIndicesResponse:
      required:
        - indices
      type: object
      properties:
        indices:
          type: array
          items:
            type: string
          description: List of the names of all indices.
    ErrorResponse:
      required:
        - message
        - type
      type: object
      properties:
        message:
          description: The error message.
          type: string
        type:
          description: The type of the error in the backend.
          type: string
    CreateDocumentRequest:
      required:
        - document_id
      type: object
      description:
        "Index a document with given external id according to the specified settings."
      properties:
        document_id:
          type: string
          description: The id of the document to be indexed.
        document_index_settings:
          $ref: '#/components/schemas/DocumentIndexSettings'
    DocumentIndexSettings:
      type: object
      properties:
        split_sentences:
          type: boolean
          default: true
          description: Whether to split the document into sentences.
        sentence_count:
          type: integer
          default: 3
          minimum: 1
          description: The number of sentences to group and index together.
        sentence_overlap:
          type: integer
          default: 1
          minimum: 0
          description: The number of sentences consecutive sentence groups overlap.
        min_chars:
          type: integer
          default: 1
          minimum: 0
          description: The minimum number of characters a sentence group must contain. If the length of a sentence group is below this value, additional sentences are added until this requirement is fulfilled.
        semantic_fields:
          type: array
          items:
            type: string
          default: ["content_text_"]
          description: |
            The names of text fields, which should be semantically embedded. The default value 'content_text_' refers to the raw document text content.

            > **_NOTE:_**  For simple database backends, only the default content_text_ is semantically embedded at the moment.
        delete_source:
          type: boolean
          default: true
          description: Delete the source files belonging to that document.